Parfait, utiliser **Django** te permet d‚Äôint√©grer ton mod√®le de toxicit√© dans une vraie application web structur√©e ! Voici **√©tape par √©tape** comment cr√©er une interface Django pour charger les donn√©es et tester le mod√®le :

---

## ‚úÖ Objectif

Cr√©er une app Django qui permet √† l'utilisateur d'entrer les **6 descripteurs** et d'obtenir une **pr√©diction de toxicit√©** en r√©ponse.

---

## üß± Structure du projet

```
project_project/
‚îÇ
‚îú‚îÄ‚îÄ project_app/
‚îÇ   ‚îú‚îÄ‚îÄ views.py
‚îÇ   ‚îú‚îÄ‚îÄ urls.py
‚îÇ   ‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ project_project/
‚îÇ   ‚îî‚îÄ‚îÄ settings.py ...
‚îú‚îÄ‚îÄ manage.py
‚îú‚îÄ‚îÄ Model_Entrainer.h5
‚îú‚îÄ‚îÄ Model_Entrainer.pkl
```

---

## 1Ô∏è‚É£ Cr√©er le projet et l‚Äôapp

```bash
django-admin startproject project_project
cd project_project
python manage.py startapp project_app
```

Ajoute `"project_app"` dans `INSTALLED_APPS` (dans `settings.py`).

---

## 2Ô∏è‚É£ Charger le mod√®le dans `views.py`

```python
# project_app/views.py
from django.shortcuts import render
from keras.models import load_model
import joblib
import numpy as np

# Charger mod√®le et scaler une seule fois
model = load_model("Model_Entrainer.h5")
scaler = joblib.load("Model_Entrainer.pkl")

def index(request):
    result = None
    if request.method == "POST":
        try:
            # Lire les 6 valeurs du formulaire
            features = [float(request.POST[f'f{i}']) for i in range(1, 7)]
            X_scaled = scaler.transform([features])
            prediction = model.predict(X_scaled)[0][0]
            result = {
                "classe": "Toxique" if prediction >= 0.5 else "Non toxique",
                "score": round(float(prediction), 2)
            }
        except Exception as e:
            result = {"error": f"Erreur : {e}"}
    return render(request, "index.html", {"result": result})
```

---

## 3Ô∏è‚É£ Cr√©er un formulaire HTML dans `project_app/templates/index.html`

```html
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>project Toxicit√©</title>
</head>
<body>
    <h1>Pr√©diction de la toxicit√©</h1>
    <form method="post">
        {% csrf_token %}
        {% for i in "123456" %}
            <label for="f{{ i }}">Descripteur {{ i }} :</label>
            <input type="number" step="any" name="f{{ i }}" required><br>
        {% endfor %}
        <br>
        <input type="submit" value="Pr√©dire">
    </form>

    {% if result %}
        <h2>R√©sultat : {{ result.classe }} (score : {{ result.score }})</h2>
    {% endif %}
</body>
</html>
```

---

## 4Ô∏è‚É£ Ajouter `urls.py` dans l‚Äôapp

```python
# project_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
]
```

Et l‚Äôinclure dans le `urls.py` principal :

```python
# project_project/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('project_app.urls')),
]
```

---

## 5Ô∏è‚É£ Lancer le serveur

```bash
python manage.py runserver
```

Va sur [http://127.0.0.1:8000](http://127.0.0.1:8000) et tu peux **tester ton mod√®le via une interface HTML Django** üéâ

---

## üì¶ Astuce pour organisation

* Garde `Model_Entrainer.h5` et `Model_Entrainer.pkl` dans le dossier racine ou `project_app/`.
* Tu peux aussi ajouter un bouton pour **t√©l√©verser un CSV**, si tu veux tester des fichiers entiers.

---

Souhaites-tu maintenant que je t‚Äôaide √† ajouter un **formulaire pour charger un fichier CSV** et afficher les r√©sultats ligne par ligne dans la page web ?
